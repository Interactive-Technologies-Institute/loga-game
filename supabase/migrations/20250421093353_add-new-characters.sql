create table public.saved_stories (
  id bigint generated by default as identity not null,
  story_id text not null default generate_story_id (),
  created_at timestamp with time zone not null default timezone ('utc'::text, now()),
  player_name text not null,
  story_title text not null,
  character jsonb not null,
  rounds jsonb not null,
  card_types text[] not null default '{}'::text[],
  full_story text not null,
  constraint saved_stories_pkey primary key (id),
  constraint saved_stories_story_id_key unique (story_id),
  constraint valid_character_type check (
    (
      (("character" ->> 'type'::text))::character_type is not null
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_saved_stories_story_id on public.saved_stories using btree (story_id) TABLESPACE pg_default;

-- Add RLS policies
ALTER TABLE public.saved_stories ENABLE ROW LEVEL SECURITY;

-- Create policy to allow anyone to read stories
CREATE POLICY "Anyone can read saved stories"
ON public.saved_stories
FOR SELECT
USING (true);

-- Create a function to save story
CREATE OR REPLACE FUNCTION public.save_story(
    p_player_name TEXT,
    p_story_title TEXT,
    p_character_type character_type,
    p_character_nickname TEXT,
    p_rounds JSONB
)

DECLARE
    v_story_id BIGINT;
BEGIN
    -- Validate character structure
    IF (p_character->>'type')::character_type IS NULL THEN
        RAISE EXCEPTION 'Invalid character type';
    END IF;

    IF p_character->>'nickname' IS NULL THEN
        RAISE EXCEPTION 'Character nickname is required';
    END IF;

    -- Insert the story
    INSERT INTO public.saved_stories (
        player_name,
        story_title,
        character,
        rounds
    )
    VALUES (
        p_player_name,
        p_story_title,
        p_character,
        p_rounds
    )
    RETURNING id INTO v_story_id;

    RETURN v_story_id;
EXCEPTION
    WHEN others THEN
        RAISE EXCEPTION 'Error saving story: %', SQLERRM;
END;
$$;

create or replace function public.cleanup_player_data(
    game_code varchar,
    player_id bigint
)
returns void
language plpgsql
security definer
as $$
begin
    -- Delete player's answers
    delete from public.player_answers
    where game_id = (select id from public.games where code = game_code)
    and player_id = player_id;

    -- Delete player's cards
    delete from public.player_cards
    where game_id = (select id from public.games where code = game_code)
    and player_id = player_id;

    -- Delete player's moves
    delete from public.player_moves
    where game_id = (select id from public.games where code = game_code)
    and player_id = player_id;

    -- Delete player
    delete from public.players
    where game_id = (select id from public.games where code = game_code)
    and id = player_id;
end;
$$;